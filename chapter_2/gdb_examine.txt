EXAMINE gdb

x/<number of items to examine>{o,x,u,t}{b,h,w,g}

Number of items to examine: 
n * {b,h,w,g}
If n = 2 and you chose to output it in word, you will get
2 * 32 bits of data = 64 bits of data = 16 hex digits. Lets us examine
multiple units after the target address 

Controls how the data is formatted
o = Octet
x = Hexadecimal
u = Unsigned integer
t = Binary

Controls how long each data "packet" is.
b = byte (2 hex digits)     (8 bits )
h = halfword (4 hex digits) (16 bits)
w = word (8 hex digits)     (32 bits)
g = giant (16 hex digits)   (64 bits)

LITTLE ENDIAN
(gdb) x/2xb $rip
0x40052e <main+8>:  0xc7    0x45
(gdb) x/2ub $rip
0x40052e <main+8>:  199 69

(gdb) x/1xh $rip
0x40052e <main+8>:  0x45c7
(gdb) x/1uh $rip
0x40052e <main+8>:  17863

Î» bc -ql
(256^1)*199 + (256^0)*69
51013
(256^1)*69 + (256^0)*199
17863

0xc7 is equal to 199, and 0x45 is equal to 69
If I change the base in the anti-little-endian order, I will get a 
wrong answer compared to the x/1uh (51013, which is wrong). However, if
I interpret it in the correct order, I get 17863, which is 0x45c7

The base change formula is 256 because there are 256 combinations in 
a single byte (which is 8 bits, which is 2^8 = 256)

EXAMINING INSTRUCTIONS
x/<num>i [memory address]: this will get the value of the address and
will interpret it as machine code to get assembly language

(gdb) x/i $rip
=> 0x40052e <main+8>:   mov    DWORD PTR [rbp-0x4],0x0
(gdb) x/7xb $rip
0x40052e <main+8>:  0xc7 0x45 0xfc 0x00 0x00 0x00 0x00

This confirms that the disassembly of main's middle portion is the 
machine code translated into the assembly

mov    DWORD PTR [rbp-0x4],0x0
This will zero out the variable i for the for loop (i = 0;...;...)
It is has DWORD because it is decared as an int (a 32 bit value)
, and DWORDs are 32-bit values

nexti: continue to next instruction

x/s [address]:
Looks inside the address and translates the data into ascii

lea eax,[ebp-4]:
lea will take the ADDRESS ebp-4 and put it into eax.
HOWEVER, mov will take the CONTENTS of ebp-4 and put it in eax.


